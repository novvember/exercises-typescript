---

name: Типы как множества
theory: |

  Что вообще такое тип данных? Чтобы ответить на этот вопрос, лучше начать с ответа на вопрос, что было до типов данных? Семейство языков, в котором нет типов данных называется ассемблером. Эти языки работают напрямую с процессором и оперируют его регистрами. В регистрах хранятся значения, которые с точки зрения языка являются числами. А что закодировано за этим числом, должен определять сам программист, будь то строка или часть картинки.

  Главная проблема такого подхода в отсутствии какой-либо безопасности. Программа никогда не выдаст ошибку если мы случайно что-то сделаем со "строкой", чего с ней делать нельзя. С точки зрения процессора и языка программирования строки нет, есть число и мы выполняем над ним какие-то операции. В итоге программа работает всегда, но результат неверный. Представьте себе какой уровень внимательности нужен, чтобы программировать в таком режиме.

  Ситуацию исправило появления типов данных в высокоуровневых языках. Типы позволили выполнить две задачи:

  * Описать и ограничить множество всех значений конкретного типа
  * Определить операции, которые возможно выполнить с этим типом

  Все это заложено в определении: Тип данных - это множество всех значений и набор допустимых операций над ними. Что нам это дает? Типобезопасность. Даже в динамическом языке, таком как, JavaScript, мы получаем значительно более сильную безопасность чем в ассемблере. В статическом же, таком как TypeScript, уровень проверки совместимости типов выходит на другой уровень.

  ## Множества

  Обычно когда говорят про определение типов, обращают внимание в первую очередь на вторую часть: "набор допустимых операций". А вот первая часть кажется более размытой "набор допустимых значений". С одной стороны это может быть ограничение числа по верхней и нижней границе, как в JavaScript. У нас есть Number для одного диапазона чисел и BigInt для другого, где нужно работать с огромными числами. С другой, мы ведь говорим про множества.

  И вот этот взгляд на типы как на множества имеет огромную роль в нашем случае. Связано это с тем, что система типов языка TypeScript умеет комбинировать типы так как это делается в обычных множествах. Например, мы можем объединить два множества типов получив новый тип, в который входят все элементы первого множества (типа) и второго множества (типа). Так появляется Union Type:

  ```typescript
  type SomeType = number | string;
  const v1: SomeType = 1;
  const v2: SomeType = 'hexlet';
  ```

  <!-- TODO: добавить картинку -->

  Примерно таким же способом мы можем построить пересечение типов, расширение и сделать другие интересные штуки с типами. Кое-что мы рассмотрим дальше по курсу, но часть вещей останется за пределами. Но чтобы не происходило дальше, важно перестроить свое мышление на операции с типами, это позволит значительно упростить понимание принципов работы TypeScript и вы сможете лучше запоминать, а иногда даже сами догадываться до определенного поведения.

instructions: |

  Определите тип `CustomType`, который может принимать следующие значения:

  1. null
  2. undefined
  3. числа
